<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd

                           http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource"> 
		<property name="driverClass" value="org.h2.Driver"/> <property name="url" 
		value="jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"/> <property name="username" 
		value="sa"/> <property name="password" value=""/> </bean> -->

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />

		<!-- 基本属性 url、user、password -->
		<property name="url"
			value="jdbc:mysql://172.16.13.26:3306/activiti?useUnicode=true&amp;characterEncoding=utf-8" />
		<property name="username" value="activiti" />
		<property name="password" value="Activiti@123" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<!-- 首次启动maxActive如果设置为1会一直连接超时 -->
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="poolPreparedStatements" value="true" />
		<property name="maxOpenPreparedStatements" value="20" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- spring integration -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<!-- 自动建表 -->
		<property name="databaseSchemaUpdate" value="true" />
		<property name="asyncExecutorActivate" value="false" />
		<!-- 自动部署流程图 -->
		<property name="deploymentResources" value="classpath*:diagrams/*" />
		<!-- 连接无用后，是否主动连接 -->
		<property name="jdbcPingEnabled" value="true" />
		<!-- 连接无用检查并连接间隔，单位毫秒 -->
		<property name="jdbcPingConnectionNotUsedFor" value="3600000" />
	</bean>

	<!-- activiti配置 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>

	<!-- Activiti引擎的七大Service接口 Service接口 作用 RepositoryService 流程仓库Service，用于管理流程仓库，例如部署、删除、读取流程资源 
		IdentifyService 身份Service，用于管理和查询用户、组之间的关系 RuntimeService 运行时Service，可以也拿过来处理所有正在运行状态的流程实例、任务等 
		TaskService 任务Service，用于管理和查询任务，例如签收、办理、指派等 FormService 表单Service，用于读取流程、任务相关的表单数据 
		HistoryService 历史Service，用于查询所有历史数据，例如流程实例、任务、活动、变量、附件 ManagementService 
		引擎管理Service，和具体业务无关，主要可以查询引擎配置、数据库、作业等 -->
	<!-- activiti主要的Service -->
	<bean id="repositoryService" factory-bean="processEngine"
		factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine"
		factory-method="getRuntimeService" />
	<bean id="taskService" factory-bean="processEngine"
		factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine"
		factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngine"
		factory-method="getManagementService" />

</beans>